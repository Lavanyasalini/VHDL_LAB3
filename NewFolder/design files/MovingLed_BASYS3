----------------------------------------------------------------------------------

--
--     Wrapper for the MovingLed system.

----------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity MovingLed_BASYS3 is
    port(
        clk:   in   std_logic;
        btnC:  in   std_logic;
        btnR:  in   std_logic;
        btnL:  in   std_logic;
        seg:   out  std_logic_vector(6 downto 0);
        dp:    out  std_logic;
        led:   out  std_logic_vector(15 downto 0);
        an:    out  std_logic_vector(3 downto 0)
    );
end MovingLed_BASYS3;

architecture MovingLed_BASYS3_ARCH of MovingLed_BASYS3 is

    -- constants
    constant ACTIVE: std_logic := '1';
    constant TIME_BETWEEN_PULSES: positive := 15;
    constant CLOCK_FREQUENCY:     positive := 100_000_000;
    constant CHAIN_SIZE: positive := 2;

    -- internal signals
    signal syncedLeftButton: std_logic;
    signal syncedRightButton: std_logic;
    signal moveLeftEn: std_logic;
    signal moveRightEn: std_logic;
    signal ledNum: unsigned(3 downto 0);

    signal digit3: std_logic_vector(3 downto 0);  -- hex value
    signal digit2: std_logic_vector(3 downto 0);  -- blank
    signal digit1: std_logic_vector(3 downto 0);  -- decimal tens
    signal digit0: std_logic_vector(3 downto 0);  -- decimal ones

    signal tempDigits: std_logic_vector(7 downto 0);
    signal currentLED: std_logic_vector(7 downto 0);


    signal sevenSegs: std_logic_vector(6 downto 0);
    signal anodes:    std_logic_vector(3 downto 0);

    -- Components
    component MovingLed
        port (
            moveLeftEn:  in std_logic;
            moveRightEn: in std_logic;
            reset:       in std_logic;
            clock:       in std_logic;
            leds:        out std_logic_vector(15 downto 0);
            ledNum:      out unsigned(3 downto 0)
        );
    end component;

    component ButtonSync
        generic (CHAIN_SIZE: positive);
        port (
            reset:        in std_logic;
            clock:        in std_logic;
            button:       in std_logic;
            syncedButton: out std_logic
        );
    end component;

    component ButtonPulser
        port (
            reset:        in std_logic;
            clock:        in std_logic;
            syncedButton: in std_logic;
            buttonPulse:  out std_logic
        );
    end component;

    component SevenSegmentDriver
        port (
            reset: in std_logic;
            clock: in std_logic;
            digit3: in std_logic_vector(3 downto 0);
            digit2: in std_logic_vector(3 downto 0);
            digit1: in std_logic_vector(3 downto 0);
            digit0: in std_logic_vector(3 downto 0);
            blank3: in std_logic;
            blank2: in std_logic;
            blank1: in std_logic;
            blank0: in std_logic;
            sevenSegs: out std_logic_vector(6 downto 0);
            anodes:    out std_logic_vector(3 downto 0)
        );
    end component;

    -- BCD function for 0-15
    function to_bcd_8bit(inputValue: integer) return std_logic_vector is
        variable tensValue: integer;
        variable onesValue: integer;
    begin
        if (inputValue < 99) then
            tensValue := inputValue / 10;
            onesValue := inputValue mod 10;
        else
            tensValue := 9;
            onesValue := 9;
        end if;
        return std_logic_vector(to_unsigned(tensValue, 4))
               & std_logic_vector(to_unsigned(onesValue, 4));
    end to_bcd_8bit;

begin
    -- button synchronizers
    LEFT_BUTTON_SYNC: ButtonSync
        generic map (CHAIN_SIZE => CHAIN_SIZE)
        port map (
            button => btnL,
            reset => btnC,
            clock => clk,
            syncedButton => syncedLeftButton
        );

    RIGHT_BUTTON_SYNC: ButtonSync
        generic map (CHAIN_SIZE => CHAIN_SIZE)
        port map (
            button => btnR,
            reset => btnC,
            clock => clk,
            syncedButton => syncedRightButton
        );

    -- button pulsers
    LEFT_BUTTON_PULSER: ButtonPulser
        port map (
            syncedButton => syncedLeftButton,
            reset => btnC,
            clock => clk,
            buttonPulse => moveLeftEn
        );

    RIGHT_BUTTON_PULSER: ButtonPulser
        port map (
            syncedButton => syncedRightButton,
            reset => btnC,
            clock => clk,
            buttonPulse => moveRightEn
        );

    -- main led driver
    UUT: MovingLed
        port map (
            moveLeftEn => moveLeftEn,
            moveRightEn => moveRightEn,
            reset => btnC,
            clock => clk,
            leds => led,
            ledNum => ledNum
        );

    -- 7-segment digit assignments
    digit3 <= std_logic_vector(ledNum);  -- hex display
    digit2 <= (others => not ACTIVE);    -- blank second from left
    -- decimal using BCD
	tempDigits <= to_bcd_8bit(to_integer(unsigned(currentLed)));
	digit1 <= tempDigits(7 downto 4);    -- tens place
	digit0 <= tempDigits(3 downto 0);    -- ones place);

    -- seven segment driver
    SEVEN_SEG_DRIVER: SevenSegmentDriver
        port map (
            reset     => btnC,
            clock     => clk,
            digit3    => digit3,
            digit2    => digit2,
            digit1    => digit1,
            digit0    => digit0,
            blank3    => not ACTIVE,
            blank2    => ACTIVE,
            blank1    => not ACTIVE,
            blank0    => not ACTIVE,
            sevenSegs => sevenSegs,
            anodes    => anodes
        );

    -- constant decimal point
    dp <= not ACTIVE;

    -- connect outputs
    seg <= sevenSegs;
    an  <= anodes;

end MovingLed_BASYS3_ARCH;
